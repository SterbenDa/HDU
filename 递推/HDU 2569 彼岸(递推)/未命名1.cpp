/*
设当悬崖的长度为n时,到达彼岸的方法有F[n]种.
F[1] = 3,F[2] = 9,F[3] = 21
分为两种情况：
(1)第n-2段与n-1段颜色相同,则第n段可以为三种颜色的任意一种：
F[n-2] * 3
（2）第n-2段与n-1段颜色不同,第n段只能为其中的两种颜色：
(F[n-1] - F[n-2]) * 2

在F[n-1]中的可行解,有一些是n-1和n-2颜色一样的,假设数目为x
有一些是n-1和n-2颜色不一样的,数目为y （这个是第二点要求的）
则有x+y = F[n-1]
对于n-1和n-2颜色一样的情况,一一对应一种n-2的可行解,所以x = F[n-2]
所以 y = F[n-1] - F[n-2]
*/

#include<stdio.h>
#include<math.h>
int main()
{
 int c,n,i;
 __int64 sum[43];
 sum[1]=3;
 sum[2]=9;
 for(i=3;i<40;i++)
  sum[i]=(2*sum[i-1]+sum[i-2]);
 scanf("%d",&c);
 while(c--)
 {
  scanf("%d",&n);
  printf("%d\n",sum[n]);
 }
 return 0;
}
/*总结：
设当悬崖的长度为n时，到达彼岸的方法有F[n]种。
    显然，F[1] = 3, F[2] = 9, F[3] = 21    
    分为两种情况：
    (1)第n-2段与n-1段颜色相同，则第n段可以为三种颜色的任意一种：
    F[n-2] * 3
    (2)第n-2段与n-1段颜色不同，第n段只能为其中的两种颜色：
    (F[n-1] - F[n-2]) * 2
    故，总的方法数为：F[n-2] * 3 +　(F[n-1] - F[n-2]) * 2　＝　F[n-1] * 2 + F[n-2]


*/

